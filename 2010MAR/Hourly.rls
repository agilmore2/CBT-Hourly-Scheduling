# RiverWare_Ruleset 5.2.1 Patch
# Created 15:14 July 30, 2010
# 
RULESET
AGENDA_ORDER ASCENDING;
DESCRIPTION "";
PRECISION   8;
BEGIN

  POLICY_GROUP   "Policy Group";
  DESCRIPTION    "";
  ACTIVE         TRUE;
  BEGIN

    RULE                 "Convert Gen Schedule to Flows";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    BEGIN

      FOREACH (DATETIME date IN "GetDates"( @"Start Timestep", @"Finish Timestep", "1 hours" )) DO
            $ "EstesPowerplant.Outflow" [date] := "GetFlowfromGen"( % "EstesPowerplant", date );

            $ "FlatironPowerplant.Outflow" [date] := "GetFlowfromGen"( % "FlatironPowerplant", date );

          INACTIVE      $ "EstesPowerplant.Bypass" [date] := 0.00000000 "cfs";

          INACTIVE      $ "FlatironPowerplant.Bypass" [date] := 0.00000000 "cfs";

      ENDFOREACH;

    END;

    RULE                 "Apply 930 Gage Fix";
    DESCRIPTION          "";
    ACTIVE               FALSE;
    RULE_EXEC_CONSTRAINT @"t" == @"Start Timestep";
    BEGIN

      $ "Fix 930 Gage.Local Inflow" [] := - ( $ "HFC930Section.Gage Inflow" [@"Start Timestep - 1"] - $ "HFC550Section.Gage Inflow" [@"Start Timestep - 1"] );

    END;

    RULE                 "CopyLastValues";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    BEGIN

      FOREACH (SLOT slot IN { $ "Adams Tunnel.Gage Inflow" , $ "BigThompsonAboveEstesInflow.Gage Inflow" , $ "BigThompsonBelowEstes.Gage Inflow" , $ "OlympusTunnel.Gage Inflow" , $ "HFC930Section.Gage Inflow" , $ "DilleDiversion.Diversion Request" , RPL_DISABLE $ "HandyDitch.Diversion" , $ "Wasteway.Diversion Request" , $ "BigThompsonPowerplant.Inflow" , $ "Wind River Near Estes Park.Gage Inflow" , $ "Wind River Bypass.Gage Inflow" , $ "NorthForkBigThompsonAtDrake.Gage Inflow" }) DO
            slot [] := IF ( NOT "IsInput"( slot, @"t" ) )
   THEN
      slot [@"t - 1"]
   ENDIF COMMENTED_BY "This will copy the previous value for the slot if the slot is not already input.";

      ENDFOREACH;

      IF_STATEMENT (@"t" == @"Start Timestep") THEN
            $ "HFC930Section.Gage Inflow" [] := IF ( NOT "IsInput"( $ "HFC930Section.Gage Inflow", @"t" ) )
   THEN
      $ "HFC930Section.Gage Inflow" [@"t - 1"] - ( $ "HFC930Section.Gage Inflow" [@"Start Timestep - 1"] - ( $ "BigThompsonPowerplant.Inflow" [@"Start Timestep - 1"] + $ "Trifurcation:Siphon.Delivered Flow" [@"Start Timestep - 1"] + $ "Trifurcation:Wasteway.Delivered Flow" [@"Start Timestep - 1"] - $ "DilleDiversion.Diversion" [@"Start Timestep - 1"] ) - $ "HFC550Section.Gage Inflow" [@"Start Timestep - 1"] )
   ENDIF COMMENTED_BY "This provides the offset for the 930 section gage from the flow north gage.";

      END_IF_STATEMENT;

    END;

    RULE                 "CopyorZero";
    DESCRIPTION          "";
    ACTIVE               TRUE;
    RULE_EXEC_CONSTRAINT TRUE;
    BEGIN

      FOREACH (SLOT slot IN { $ "FlatironBifurcation.Outflow2" , $ "Unit3Generator.Outflow" , $ "Unit3Pump.Inflow" , $ "HandyDitch.Diversion Request" , $ "FlatironReservoir.Release" }) DO
            slot [] := IF ( NOT "IsInput"( slot, @"t" ) )
   THEN
      IF ( NOT IsNaN slot [@"t - 1"] )
      THEN
         slot [@"t - 1"]
      ELSE
         0.00000000 "cfs"
      ENDIF
   ENDIF;

      ENDFOREACH;

    END;

  END;

  UTILITY_GROUP "Utility Group";
  DESCRIPTION   "";
  ACTIVE        TRUE;
  BEGIN

    FUNCTION       "GetFlowfromGen" ( OBJECT obj, DATETIME date )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    BEGIN

      "TableInterpolation"( obj & "Flow vs Power Table", 1.00000000, 0.00000000, "FindGeneration"( obj, date ), date );

    END;

    FUNCTION       "FindGeneration" ( OBJECT obj, DATETIME date )
    RETURN_TYPE    NUMERIC;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    BEGIN

      IF ( "IsInput"( % "LAP" & ( obj CONCAT " Generation" ), date ) )
   THEN
      % "LAP" & ( obj CONCAT " Generation" ) [date]
   ELSE
      % "LAP" & ( obj CONCAT " Generation" ) ["FindDateinFirstDay"( date )]
   ENDIF;

    END;

    FUNCTION       "FindDateinFirstDay" ( DATETIME date )
    RETURN_TYPE    DATETIME;
    SCALE_UNITS    "";
    DESCRIPTION    "";
    ACTIVE         TRUE;
    PRE_EXEC_DIAG  FALSE;
    POST_EXEC_DIAG FALSE;
    BEGIN

      "Mod"( date - "DayBeforeStart"(  ), 1.00000000 "hour", 24.00000000 "hour", 1.00000000 "hour" ) + "DayBeforeStart"(  );

    END;

  END;

END
